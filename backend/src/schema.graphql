# import * from './generated/prisma.graphql'
type SuccessMessage {
  message: String
}

input ProductTemplateInput {
  id: ID
  name: String!
  status: Boolean
  fields: [ProductFieldInput]!
  delete: [ProductFieldWhereUniqueInput]!
}

input ProductFieldInput {
  id: ID
  type: String!
  name: String!
  default: String
  suffix: String
  role: Job
  required: Boolean
}

type Mutation {
  signIn(email: String!, password: String!): User!
  signOut : SuccessMessage
  signUp(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProfile(firstName: String, lastName: String, email: String, phone: String, location: String, job: [Job], bloodType: String, ICEName: String, ICEContact: String) : User!
  changePassword(oldPassword: String!, newPassword: String!): User!
  changeAvatar(image: String!): User!
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  createStockItem(data: StockItemCreateInput!): StockItem!
  createStockCategory(data: StockCategoryCreateInput!): StockCategory!
  upsertStockCategory(where: StockCategoryWhereUniqueInput!, create: StockCategoryCreateInput!, update: StockCategoryUpdateInput!): StockCategory!
  deleteManyStockCategories(where: StockCategoryWhereInput): BatchPayload!
  upsertStockItem(where: StockItemWhereUniqueInput!, create: StockItemCreateInput!, update: StockItemUpdateInput!): StockItem!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  upsertProductTemplate(where: ProductTemplateWhereUniqueInput!, create: ProductTemplateCreateInput!, update: ProductTemplateUpdateInput!): ProductTemplate!
  upsertProductField(where: ProductFieldWhereUniqueInput!, create: ProductFieldCreateInput!, update: ProductFieldUpdateInput!): ProductField!
  upsertProductTemplateItem(where: ID, data: ProductTemplateInput!): ProductTemplate!
  upsertWorksheet(where: WorksheetWhereUniqueInput!, create: WorksheetCreateInput!, update: WorksheetUpdateInput!): Worksheet!
}

type Query {
  me: User
  user(where: UserWhereInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, first: Int): [Customer]!
  stockCategories(where: StockCategoryWhereInput, orderBy: StockCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockCategory]!
  stockItem(where: StockItemWhereUniqueInput!): StockItem
  stockItems(where: StockItemWhereInput, orderBy: StockItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockItem]!
  supplier(where: SupplierWhereUniqueInput!): Supplier
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  productTemplate(where: ProductTemplateWhereUniqueInput!): ProductTemplate
  productTemplates(where: ProductTemplateWhereInput, orderBy: ProductTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductTemplate]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  worksheet(where: WorksheetWhereUniqueInput!): Worksheet
  worksheets(where: WorksheetWhereInput, orderBy: WorksheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Worksheet]!
}